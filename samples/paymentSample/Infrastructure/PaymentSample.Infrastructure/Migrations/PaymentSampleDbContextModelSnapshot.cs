// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentSample.Infrastructure;

namespace PaymentSample.Infrastructure.Migrations
{
    [DbContext(typeof(PaymentSampleDbContext))]
    partial class PaymentSampleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("payment")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymenTransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymenTransactionStatus");
                });

            modelBuilder.Entity("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("MerchantTransactionDateTime");

                    b.Property<string>("Msisdn");

                    b.Property<string>("OrderId");

                    b.Property<int?>("PaymenTransactionStatusId");

                    b.Property<int?>("ReferanceTransactionId");

                    b.Property<Guid?>("ReferanceTransactionId1");

                    b.Property<string>("ResponseCode");

                    b.Property<string>("ResponseMessage");

                    b.Property<DateTime>("TransactionDateTime");

                    b.Property<int>("TransactionStatusId");

                    b.Property<int>("TransactionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PaymenTransactionStatusId");

                    b.HasIndex("ReferanceTransactionId1");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTransactionType");
                });

            modelBuilder.Entity("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransaction", b =>
                {
                    b.HasOne("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymenTransactionStatus", "PaymenTransactionStatus")
                        .WithMany()
                        .HasForeignKey("PaymenTransactionStatusId");

                    b.HasOne("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransaction", "ReferanceTransaction")
                        .WithMany()
                        .HasForeignKey("ReferanceTransactionId1");

                    b.HasOne("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransactionType", "PaymentTransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("PaymentSample.Domain.AggregatesModel.PaymentAggregate.Money", "Money", b1 =>
                        {
                            b1.Property<Guid?>("PaymentTransactionId");

                            b1.Property<decimal?>("Amount")
                                .HasColumnName("Amount");

                            b1.Property<int?>("CurrencyCode")
                                .HasColumnName("CurrencyCode");

                            b1.ToTable("PaymentTransactions","payment");

                            b1.HasOne("PaymentSample.Domain.AggregatesModel.PaymentAggregate.PaymentTransaction")
                                .WithOne("Money")
                                .HasForeignKey("PaymentSample.Domain.AggregatesModel.PaymentAggregate.Money", "PaymentTransactionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
